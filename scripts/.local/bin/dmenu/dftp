#!/bin/sh
# a dmenu interface to discover and mount LAN FTP servers.
# requires dmenu, curlftpfs, avahi, moreutils.

# mountpoints directory
dir=${XDG_RUNTIME_DIR:-${TMPDIR:-/tmp}}/dftp

main() {
    a=$( ( printf 'Mount\nUnmount\nCleanup\n'; list_mountpoints ) | dmenu -p 'dftp') || return 1
    case $a in
        Mount) mount ;;
        Unmount) unmount ;;
        Cleanup) cleanup; exec "$0" ;;
        '') ;;
        *) mount_ftp "$a"
    esac
}

list_mountpoints() {
    for mp in "${dir:?}"/*; do
        [ -d "$mp" ] && basename "$mp"
    done
}

cleanup() {
    rmdir "${dir:?}"/*/ >/dev/null 2>&1
}

unmount() {
    mp=$(
        for mp in "${dir:?}"/*; do
            [ -d "$mp" ] && mountpoint -q "$mp" && basename "$mp"
        done | ifne dmenu
    ) && [ -d "${dir:?}/$mp" ] || return 1
    msg=$(fusermount -u "${dir:?}/$mp" 2>&1) &&
        notify-send dftp Unmounted. ||
        notify-send Error "$msg"
}

mount() {
    host=$(discover_avahi) || host=$(discover_curl) || return 1
    mount_ftp "$host"
}

mount_ftp() {
    # if it's already mounted, open it
    mp=${dir:?}/${1:?}
    if mountpoint -q "$mp"; then
        (xdg-open "$mp" &) >/dev/null 2>&1
        return
    fi

    # get user and password
    user=$(dmenu -p 'Enter USER:PASSWORD >' <&-)

    # mount
    mkdir -p "$mp" || exit 1
    msg=$(curlftpfs -o "${user:+user=$user,}transform_symlinks" "${1:?}" "${mp:?}" 2>&1) &&
        notify-send Mounted. || {
        notify-send Error "$msg"
        return 1
    }

    # open
    (xdg-open "$mp" &) >/dev/null 2>&1
}

discover_avahi() {
    pidof -q avahi-daemon || return 1
    hosts=$(avahi-browse -lprt _ftp._tcp | grep ^= | grep -v IPv6 | cut -d\; -f7-9 | tr \; :)
    [ -z "$hosts" ] && return 1
    host=$(echo "$hosts" | dmenu -p 'Choose Server') || return 1
    [ -n "$host" ] && echo "$hosts" | cut -d: -f2- || return 1
}

discover_curl() {
    unset hosts
    port=$(dmenu -p "Enter the Server's Port :" <&-) || return 1
    [ "$port" -eq "$port" ] || return 1
    gateway=$(set -- $(ip r); echo "$3")
    [ -z "$gateway" ] && return 1
    subnet=${gateway%.*}
    hosts=$(timeout 3 curl -ZIsw'%{exitcode} %{url}\n' --parallel-max 999 \
        --connect-timeout 2 "ftp://$subnet.[0-255]:${port:?}" |
        grep -Ev "ftp://$gateway:" | grep -E '^(0|60|67) ')
    [ -z "$hosts" ] && return 1
    host=$(echo "$hosts" | cut -d/ -f3- | dmenu -p 'Choose Server') || return 1
    [ -n "$host" ] && echo "$host" || return 1
}

main "$@"
