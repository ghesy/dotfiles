#!/bin/sh

# config
new_connection_display_minutes=5

main() {
    echo 
    pidof -q NetworkManager || return
    get_vars
    no_connections && echo  && return
    if no_internet; then
        echo x
    elif is_vpn_on; then
        echo 
    else
        echo 
    fi
    net_recently_changed && print_net_type
    if downloading && seeding; then echo 
    elif downloading; then echo 
    elif seeding; then echo 
    fi
}

# return true if transmission or aria2 have ongoing downloads.
downloading() {
    test $(transmission-remote -l | grep 'Downloading\|Up & Down' | wc -l) -gt 0 ||
    test $(xmlrpc http://localhost:6800/rpc aria2.tellActive | sed '1,3d' | wc -l) -gt 0
}

seeding() {
    test $(transmission-remote -l | grep 'Seeding\|Up & Down' | wc -l) -gt 0
}

print_net_type() {
    is_metered && echo ﰒ
    case $type in
        *bluetooth*) echo  ;;
        *wireless*|*wifi*) echo 直; prnt "$ssid" ;;
        *ethernet*) is_usb && echo 禍 || echo  ;;
        *) echo '?' ;;
    esac
}

no_connections() {
    [ -z "$conns" ] && return 0
    prnt "$type" | grep -qE 'tun|vpn' && return 0
    return 1
}

no_internet() {
    nmcli -g general.ip4-connectivity dev show $dev | grep -vq full
}

is_vpn_on() {
    prnt "$conns" | grep -v tailscale | cut -d: -f1 | grep -qE 'tun|vpn'
}

is_usb() {
    nmcli -g general.udi dev show $dev | grep -q '\<usb'
}

is_metered() {
    nmcli -g general.metered dev show $dev | grep -q yes
}

net_recently_changed() {
    f=${XDG_RUNTIME_DIR:-/tmp}/dwmbar-net
    prev=$(cat "$f" 2>/dev/null)
    current=$(prnt "$conns" | head -n1 | sha1sum)
    if [ "$prev" = "$current" ]; then
        state_recently_changed && return 0 || return 1
    else
        prnt "$current" >"$f"
        return 0
    fi
}

state_recently_changed() {
    [ -n "$(find "$f" -mmin -"$new_connection_display_minutes")" ]
}

get_vars() {
    conns=$(nmcli -g type,device,name conn show --active)
    type=$(prnt "$conns" | head -n1 | cut -d: -f1)
    dev=$(prnt "$conns"  | head -n1 | cut -d: -f2)
    ssid=$(prnt "$conns" | head -n1 | cut -d: -f3- | sed 's/\\:/:/g')
}

prnt() {
    printf '%s\n' "$*"
}

main "$@"
