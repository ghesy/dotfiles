#!/bin/bash
# A wine bottle manager.
# Dependencies: wine, fzf, moreutils, findutils, coreutils.
# Optional Deps: zenity, dragon-drag-and-drop.
#
# If you use ArchLinux, I recommend you install
# 'wine-ge-custom' and 'lutris-wine-meta' from the AUR
# to get wine plus all of it's optional dependencies.

# TODO: make our list of programs just be shell commands with support for quoting and args
# TODO: make new_bottle() cleaner and split it into more functions

# config
DIR=~/.local/share/beer
export WINEDEBUG=fixme-all,err-wineboot # make wine less verbose
export PULSE_LATENCY_MSEC=60

main() {
    unset PFX

    case $1 in
        -h|--help) echo 'Usage: beer [-l] [-r] [-d [prompt]]' ;;
        -l) list_all_programs ;;
        -r) run_selected_program_all ;;
        -d) list_all_programs |
            dmenu ${2:+-p "$2"} -l 30 |
            run_selected_program_all
            return ;;
        '') ;;
        *) echo 'beer: invalid arg.' >&2; return 1 ;;
    esac
    [ -n "$*" ] && return

    echo Beer
    while :; do
        local cmd
        printf '\e[5 q'
        read -p "${PFX:+$(basename "$PFX") }> " cmd
        case $cmd in
            n) new_bottle ;;
            r) remove_bottle ;;
            x) run_executable ;;
            p) select_program ;;
            e) edit_programs ;;
            v) run_winecfg ;;
            c) run_winecfg ;;
            s) run_shell ;;
            t) tricks ;;
            T) select_theme ;;
            o) open_bottle ;;
            S) select_bottle ;;
            d) deselect_bottle ;;
            h|help|'?') help ;;
            q|quit|exit) break ;;
            C|clr|clear) printf '\e[2J\e[H' ;;
            '') ;;
            *) echo Invalid command. ;;
        esac
    done
}

help() {
    echo
    echo "n  new bottle"
    echo "r  remove a bottle"
    echo
    echo "x  run an executable in bottle"
    echo "p  run one of the predefined programs"
    echo "e  edit the list of predefined programs"
    echo
    echo "c  winecfg"
    echo "s  run shell"
    echo "t  winetricks"
    echo "T  theme selection"
    echo "o  open bottle's path"
    echo
    echo "S  select bottle"
    echo "d  deselect bottle"
    echo
    echo "h  help"
    echo "C  clear the screen"
    echo "q  quit"
    echo
}

select_program() {
    if [ -n "$PFX" ]; then
        select_program_pfx
    else
        select_program_all
    fi
}

select_program_all() {
    local sel=$(list_all_programs |
        ifne fzf --prompt='Select program to run > ' --info=inline) || return 1
    printf '%s\n' "$sel" | run_selected_program_all
}

list_all_programs() {
    for b in "$DIR"/*; do
        [ ! -d "$b" ] && continue
        [ ! -s "$b"/programs ] && continue
        local p
        while IFS= read -r p; do
            printf '%s\t%s\t%s\n' \
                "$(basename "${p%.exe}")" "$(basename "$b")" "$p" |
                column -t -s'	' -o' -- '
        done < "$b"/programs
    done
}

run_selected_program_all() {
    local sel=$(cat)
    local pfx=${sel#* -- }
    pfx=$DIR/${pfx% -- *}
    local path=${sel##* -- }
    [ -d "$pfx" ] && [ -f "$pfx"/system.reg ] && [ -f "$path" ] || return 1
    WINEPREFIX=$pfx WINEARCH=$(PFX=$pfx get_arch) wine "$path"
}

select_program_pfx() {
    check_pfx || return 1
    if [ ! -s "$PFX"/programs ]; then
        echo "There aren't any predefined programs."
        return 1
    fi
    local sel=$(
        while IFS= read -r p; do
            printf '%s\t%s\n' "$(basename "${p%.exe}")" "$p" |
                column -t -s'	' -o' -- '
        done < "$PFX"/programs |
            ifne fzf --prompt='Select program to run > ' --info=inline
    ) && [ -n "$sel" ] || return 1
    WINEPREFIX=$PFX WINEARCH=$(get_arch) wine "${sel#* -- }"
}

run_shell() {
    if pgrep -xs0 "${0##*/}" | grep -qv "^$$$"; then
        echo "We're already in a shell started by beer."
        return 1
    fi
    check_pfx 'for running shell' || return 1
    echo Running shell...
    WINEPREFIX=$PFX WINEARCH=$(get_arch) ${SHELL:-sh}
}

select_bottle() {
    if [ ! -d "${DIR:?}" ] || [ -z "$(ls -A "$DIR"/)" ]; then
        echo "There aren't any bottles."
        return 1
    fi
    local sel=$(
        for d in "$DIR"/*; do
            [ -d "$d" ] && basename "$d"
        done | ifne fzf --prompt="Select bottle ${1:+$1 }> " --info=inline | xargs -I{} echo "$DIR"/{}
    )
    [ -d "$sel" ] && PFX=$sel || return 1
}

deselect_bottle() {
    unset PFX
}

run_executable() {
    check_pfx 'for running executables' || return 1
    local ans exe f
    echo "Enter the executable's path,"
    echo "or 'g' for GTK file selector,"
    echo "or 'd' for drag and drop,"
    echo "or 'q' to go back."
    read -p '>> ' ans
    case $ans in
        q|'') return ;;
        g) exe=$(zenity --file-selection --title='Select an executable') || return 1 ;;
        d) exe=$(dragon-drag-and-drop -t -x | grep -Po '^file://\K.*') || return 1 ;;
        *) exe=$ans ;;
    esac

    printf '\nThese files will be executed:\n\n'
    while IFS= read -r f; do echo "  $f"; done <<< "$exe"
    printf '\nContinue? [Y/n] '
    read ans
    case $ans in ''|y|Y) ;; *) return 1 ;; esac

    while IFS= read -r f; do
        [ -f "$f" ] && WINEPREFIX=$PFX WINEARCH=$(get_arch) wine "$exe"
    done <<< "$exe"
}

edit_programs() {
    check_pfx "to edit it's list of programs" || return 1
    local f=$(mktemp) || return 1
    [ -f "$PFX"/programs ] && cat "$PFX"/programs > "$f"
    printf '\n%s\n' '# Executable files found:' >> "$f"
    find "$PFX"/drive_c -type f -name '*.exe' \
        -not -path '*/users/Documents/*' -not -path '*/users/Temp/*' \
        -not -path '*/users/Downloads/*' -not -path '*/users/Desktop/*' \
        -not -path '*/Common Files/*' -not -path '*/ProgramData/*' \
        -not -path '*/windows/*' -not -path '*/Program Files*/Windows *' \
        -not -path '*/Internet Explorer/*' -not -path '*/InstallShield*/*' \
        -not -iname '*unins*' -not -iname '*crashhandler*' -printf '#%p\n' >> "$f"
    ${EDITOR:-xdg-open} "$f" &&
        grep -vE '^(#|$)' "$f" > "$PFX"/programs
}

new_bottle() {
    local arch name d
    read -p 'Arch: [ 64 (Default) / 32 ] ' arch
    read -p "Sandbox: [ 'h'ome (Default) / 'f'ull / 'n'one ] " sandbox
    read -p 'Name: ' name
    [ -z "$name" ] && return 1
    name=$(printf '%s\n' "$name" | sed 's/[^0-9a-zA-Z ]*//g')
    d=${DIR:?}/$name
    mkdir -p "$d" || return 1
    echo "win${arch:-64}" > "$d"/arch
    WINEPREFIX=$d WINEARCH=win${arch:-64} wine regedit <(theme_dark_background)
    case $sandbox in
        n) ;;
        ''|h) WINEPREFIX=$d WINEARCH=win${arch:-64} winetricks isolate_home ;;
        f)    WINEPREFIX=$d WINEARCH=win${arch:-64} winetricks sandbox ;;
    esac
    PFX=$d
}

remove_bottle() {
    check_pfx 'to remove' || return 1
    local ans
    read -p "REMOVE \"$(basename "$PFX")\"? [y/N] " ans
    case $ans in y|Y) ;; *) return ;; esac
    rm -r --one-file-system "$PFX"
    deselect_bottle
}

run_winecfg() {
    check_pfx 'for running winecfg' || return 1
    WINEPREFIX=$PFX WINEARCH=$(get_arch) winecfg
}

open_bottle() {
    check_pfx 'to open' || return 1
    xdg-open "$PFX"
}

tricks() {
    check_pfx 'for running winetricks' || return 1
    local args
    echo "'q' to go back."
    read -p '$ winetricks ' args
    [ "$args" = q ] && return
    WINEPREFIX=$PFX WINEARCH=$(get_arch) winetricks $args
}

check_pfx() {
    [ -n "$PFX" ] && return
    select_bottle "$1" || return 1
}

get_arch() {
    [ -z "$PFX" ] && { echo invalid; return 1 ;}
    if [ -f "$PFX"/system.reg ]; then
        grep -Pom1 '#\s*arch=\K.*' "$PFX"/system.reg
    elif [ -f "$PFX"/arch ]; then
        cat "$PFX"/arch
    else
        echo invalid
        return 1
    fi
}

select_theme() {
    check_pfx 'for themeing' || return 1
    local ans
    read -p '(d)ark-background / (b)reeze-dark / (D)efault / (q)uit : ' ans
    case $ans in
        d) theme=theme_dark_background ;;
        b) theme=theme_breeze_dark ;;
        D) theme=theme_default ;;
        *) return ;;
    esac
    apply_theme $theme

}

apply_theme() {
    [ -n "$1" ] && WINEPREFIX=$PFX WINEARCH=$(get_arch) wine regedit <($1)
}

theme_dark_background() {
    cat <<- 'eof'
	Windows Registry Editor Version 5.00
	[HKEY_CURRENT_USER\Control Panel\Colors]
	"ActiveBorder"=-
	"ActiveTitle"=-
	"AppWorkSpace"=-
	"Background"="49 54 58"
	"ButtonAlternativeFace"=-
	"ButtonDkShadow"=-
	"ButtonFace"=-
	"ButtonHilight"=-
	"ButtonLight"=-
	"ButtonShadow"=-
	"ButtonText"=-
	"GradientActiveTitle"=-
	"GradientInactiveTitle"=-
	"GrayText"=-
	"Hilight"=-
	"HilightText"=-
	"InactiveBorder"=-
	"InactiveTitle"=-
	"InactiveTitleText"=-
	"InfoText"=-
	"InfoWindow"=-
	"Menu"=-
	"MenuBar"=-
	"MenuHilight"=-
	"MenuText"=-
	"Scrollbar"=-
	"TitleText"=-
	"Window"=-
	"WindowFrame"=-
	"WindowText"=-
	eof
}

theme_breeze_dark() {
    cat <<- 'eof'
	Windows Registry Editor Version 5.00
	[HKEY_CURRENT_USER\Control Panel\Colors]
	"ActiveBorder"="49 54 58"
	"ActiveTitle"="49 54 58"
	"AppWorkSpace"="60 64 72"
	"Background"="49 54 58"
	"ButtonAlternativeFace"="200 0 0"
	"ButtonDkShadow"="154 154 154"
	"ButtonFace"="49 54 58"
	"ButtonHilight"="119 126 140"
	"ButtonLight"="60 64 72"
	"ButtonShadow"="60 64 72"
	"ButtonText"="219 220 222"
	"GradientActiveTitle"="49 54 58"
	"GradientInactiveTitle"="49 54 58"
	"GrayText"="155 155 155"
	"Hilight"="119 126 140"
	"HilightText"="255 255 255"
	"InactiveBorder"="49 54 58"
	"InactiveTitle"="49 54 58"
	"InactiveTitleText"="219 220 222"
	"InfoText"="159 167 180"
	"InfoWindow"="49 54 58"
	"Menu"="49 54 58"
	"MenuBar"="49 54 58"
	"MenuHilight"="119 126 140"
	"MenuText"="219 220 222"
	"Scrollbar"="73 78 88"
	"TitleText"="219 220 222"
	"Window"="35 38 41"
	"WindowFrame"="49 54 58"
	"WindowText"="219 220 222"
	eof
}

theme_default() {
    cat <<- 'eof'
	Windows Registry Editor Version 5.00
	[HKEY_CURRENT_USER\Control Panel\Colors]
	"ActiveBorder"=-
	"ActiveTitle"=-
	"AppWorkSpace"=-
	"Background"=-
	"ButtonAlternativeFace"=-
	"ButtonDkShadow"=-
	"ButtonFace"=-
	"ButtonHilight"=-
	"ButtonLight"=-
	"ButtonShadow"=-
	"ButtonText"=-
	"GradientActiveTitle"=-
	"GradientInactiveTitle"=-
	"GrayText"=-
	"Hilight"=-
	"HilightText"=-
	"InactiveBorder"=-
	"InactiveTitle"=-
	"InactiveTitleText"=-
	"InfoText"=-
	"InfoWindow"=-
	"Menu"=-
	"MenuBar"=-
	"MenuHilight"=-
	"MenuText"=-
	"Scrollbar"=-
	"TitleText"=-
	"Window"=-
	"WindowFrame"=-
	"WindowText"=-
	eof
}

main "$@"
