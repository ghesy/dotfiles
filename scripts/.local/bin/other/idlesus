#!/bin/sh
# check system's media players, network activity, ssh connections
# and cpu usage to determine if the system is idle, then suspend it.

# ==========
# = Config
# ==========

# perform the idle action after this much time of system being idle
timeout_min=10

# collective network bandwidth usage threshold
net_threshold_kbps=20

# percentage of cpu cycles used threshold
cpu_usage_threshold=15

# system idle checking interval
loop_interval_sec=30

# specify your locker program
locker=slock

# actions to perform when system is deemed idle
idle_action() { sysact sleep ;}

# =================
# = End of Config
# =================

main()
{
    check_deps || return 1

    unset lock
    while getopts sl opt; do
        case $opt in
            l) lock=true ;;
            s) export OPT_SILENT=true ;;
            ?) exit 1 ;;
        esac
    done

    [ "$OPT_SILENT" = true ] && exec >/dev/null 2>&1
    [ "$lock" = true ] && run_with_locker

    reset_timeout
    while true; do
        sleep $loop_interval_sec
        if is_system_idle; then
            has_timeout_reached && reset_timeout && idle_action
        else
            reset_timeout
        fi
    done
}

run_with_locker()
{
    exec sh -c "
        trap exit HUP
        trap 'pkill -P \$\$' EXIT
        "$0" &
        $locker
    "
}

has_timeout_reached()
{
    [ $(( $(now) - last_activity )) -gt $(( timeout_min * 60 )) ]
}

reset_timeout()
{
    last_activity=$(now)
}

now()
{
    date +%s
}

is_system_idle()
{
    is_nothing_playing	|| { echo playing media detected.;		return 1 ;} &&
    is_ssh_inactive		|| { echo ssh connections detected.;	return 1 ;} &&
    is_network_idle		|| { echo network activity detected.;	return 1 ;} &&
    is_cpu_idle			|| { echo high cpu activity detected.;	return 1 ;} &&
    echo system is idle.
}

is_ssh_inactive()
{
    ! pgrep -P "$(pgrep -o sshd)" >/dev/null 2>&1
}

is_cpu_idle()
{
    [ "$(cpu_usage)" -le "$cpu_usage_threshold" ]
}

cpu_usage()
{
    eval $(cpu_sample 1)
    sleep 5
    eval $(cpu_sample 2)
    idle=$(( idle2 - idle1 ))
    total=$(( total2 - total1 ))
    echo "100 - 100 * $idle / $total" | bc
}

cpu_sample()
{
    awk -v n=$1 '{ idle=$5; for (i=1; i<=NF; i++) total+=$i; exit }
        END { print "idle"n"="idle";total"n"="total }' /proc/stat
}

is_network_idle()
{
    [ "$(net_speed)" -le "$net_threshold_kbps" ]
}

net_speed()
{
    s1=$(net_sample 1)
    sleep 1
    s2=$(net_sample 2)
    echo $(( (s2 - s1) / 1024 ))
}

net_sample()
{
    awk -v n=$1 '/:/ && !/lo/ && !/tun/ {s+=$2+$10} END{print s}' /proc/net/dev
}

is_nothing_playing()
{
    ! playerctl -a status | grep -iq playing
}

check_deps()
{
    for prog in playerctl xprintidle $locker; do
        command -v $prog >/dev/null || {
            echo dependency not installed: $prog >&2
            return 1
        }
    done
}

trap exit HUP
trap "pkill -P $$" EXIT

main "$@"
