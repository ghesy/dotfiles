#!/bin/bash
# download videos using yt-dlp and aria2.

main() {
    [ -f "${1:?}" ] && return 1
    cd /media/downloads || cd ~/Downloads || cd ~ || return 1

    ask_res

    # temp dir for storing interim files
    TMP=.ytdl-tmp
    trap 'rmdir $TMP 2>/dev/null' EXIT

    NTOTAL=$#
    FAILED=()
    SUCCEEDED=()

    download_all "$@"
    summary_end
}

ask_res() {
    # ask the user what resolution to download
    read -rp 'Enter resolution [ 480 (Default) / 720 / ... / b (Best) / a (Audio) / q (Quit) ]: ' res
    [ "$res" = q ] && exit
    case $res in a) read -rp 'Convert audio to MKV to embed thumbnail? [y/N] ' cnvrtmkv ;; esac
    read -rp 'Extra Args: ' args

    unset audiofmt name remuxopt
    videofmt=yes
    thmbopt=--embed-thumbnail

    case $res in
        b) res='' name=Best ;;
        a)
            name=Audio audiofmt=bestaudio
            unset res videofmt
            case $cnvrtmkv in
                y|Y) remuxopt='--remux-video mkv' ;;
                *) unset thmbopt ;;
            esac
        ;;
        '') res=480 ;;
        *) [ "$res" -eq "$res" ] || res=480 ;;
    esac
    echo "[ytdl] ${name:-$res} selected."

    gen_opts
}

gen_opts() {
    # try not to go below res/2+res/8, unless no higher res is available
    minres=$((${res:-480}/2+${res:-480}/8))

    # the options that are passed to yt-dlp
    OPTS=(
        -S "${res:++}res${res:+:$res},codec,abr${videofmt:+~$((${res:-1800}/6))}"
        -f "${audiofmt:-bestvideo[height>=$minres]+bestaudio/bestvideo+bestaudio/best[height>=$minres]/best}"
        --no-mtime --embed-metadata $thmbopt $remuxopt --sub-lang=en --write-sub
        --write-auto-sub --embed-subs --compat-option no-keep-subs --downloader aria2c
        --downloader-args aria2c:'--async-dns=false --lowest-speed-limit=1K'
    )
}

download_all() {
    # try to download each video up to 10 times
    for URL; do
        URL=${URL#ytdl://}
        TITLE=$(get_title)
        echo "[ytdl] Downloading \"$TITLE\" ($URL)"
        for i in {1..10}; do
            if download; then
                report_success
                break
            elif [ $i -eq 10 ]; then
                report_failure
                break
            fi
            sleep 30
            echo "[ytdl] Attempt $((i+1)) of 10 to download \"$TITLE\" ($URL)"
        done
    done
}

download() {
    $(get_proxy) yt-dlp "${OPTS[@]}" -P temp:$TMP $args -- "$URL"
}

get_title() {
    $(get_proxy) yt-dlp --get-title -- "$URL"
}

get_proxy() {
    local url
    url=$($(getproxy "$URL") yt-dlp --get-url -- "$URL" 2>/dev/null) ||
        url=$(proxychains -q yt-dlp --get-url -- "$URL" 2>/dev/null)
    url=$(printf '%s\n' "$url" | head -1)
    getproxy "$url"
}

report_success() {
    notify-send ytdl Done:$'\n'"$TITLE"
    SUCCEEDED+=("$TITLE -- $URL")
    summary
}

report_failure() {
    notify-send ytdl Failed:$'\n'"$TITLE"
    FAILED+=("$TITLE -- $URL")
    summary
}

summary() {
    local left=$(( NTOTAL - ( ${#SUCCEEDED[@]} + ${#FAILED[@]} ) ))
    echo "[ytdl] ${#SUCCEEDED[@]} Done, ${#FAILED[@]} Failed, $left Left out of $NTOTAL"
}

summary_end() {
    # report a summary
    echo
    echo "[ytdl] Summary: $NTOTAL Total Downloads, ${#FAILED[@]} Failed."
    [ ${#FAILED[@]} -lt 1 ] && exit
    echo 'Failed Downloads:'
    printf -- '- %s\n' "${FAILED[@]}"
}

main "$@"
