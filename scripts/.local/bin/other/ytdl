#!/bin/sh
# this script downloads or streams internet videos.
# if it's given a censored URL and my vpn is off, it uses tor.
# requires youtube-dl, mpv, fzf, dmenu and torsocks.

# config
ask_format_regex='youtube\.com/|youtu\.be/'
blocked_urls_regex='youtube\.com/|youtu\.be/'
default_format='best[height<=480]/bestvideo[height<=480]+bestaudio/best/bestvideo+bestaudio'

main()
{
    unset fn
    while getopts ods opt; do
        case $opt in
            o|s) fn=open ;;
            d) fn=download ;;
            ?) exit 1 ;;
        esac
    done
    shift $((OPTIND-1))

    get_tor "$@"

    if [ -z "$*" ]; then
        url="$(search)" || return 1
        [ -z "$url" ] && return 1
        set -- "$url"
    fi

    if [ -z "$fn" ]; then
        fn="$(ask_fn)" || return 1
    fi

    $fn "$@"
}

search()
{
    dep ytfzf
    if in_terminal; then
        search="$(ask_search)" || return 1
        [ -z "$search" ] && return 1
        ytfzf --link-only --show-thumbnails --thumbnail-quality=0 \
            --preview-side=right -- "$search"
    else
        ytfzf --link-only --ext-menu
    fi
}

ask_search()
{
    printf %s | fzf --prompt 'Search youtube: ' --print-query \
        --info=hidden --border=none --height=1%
    e=$?
    case $e in
        0|1) return 0 ;;
        *) return $e ;;
    esac
}

ask_fn()
{
    printf 'open\ndownload\n' | menu
}

open()
{
    dep mpv
    format="$(get_format "$@")" || return 1
    $TORSOCKS mpv ${format:+--ytdl-format="$format"} -- "$@" ||
        die Failed opening the video.
}

download()
{
    dep youtube-dl
    format="$(ask_format "$@")" || return 1
    $TORSOCKS youtube-dl ${format:+-f "$format"} -- "$@"
}

get_format()
{
    if should_ask_format "$@"; then
        ask_format "$@"
    else
        prnt "$default_format"
    fi

}

ask_format()
{
    res="$(print_res_list | menu 'quality: ')" || return 1
    res_to_format "$res"
}

menu()
{
    in_terminal && cmd='fzf --info=hidden --border=none --prompt' || cmd='dmenu -p'
    dep "$(prnt "$cmd" | cut -d' ' -f1)"
    $cmd "$*"
}

print_res_list()
{
    printf '1080p\n720p\n480p\n360p\nbest\naudio\n'
}

res_to_format()
{
    res="$(prnt "$1" | tr -d p)"
    if is_number "$res"; then
        prnt "bestvideo[height<=$res]+bestaudio/best[height<=$res]"
    else
        prnt "$@" | sed -e 's/^best$/bestvideo+bestaudio\/best/' \
                        -e 's/^audio$/bestaudio/'
    fi
}

get_tor()
{
    unset TORSOCKS
    url_blocked "$@" && ! can_access_youtube &&
        export TORSOCKS=torsocks &&
        export ALL_PROXY="socks5://localhost:9050"
}

can_access_youtube()
{
    msg="$(curl -s "https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=dQw4w9WgXcQ")" || return 1
    prnt "$msg" | grep -q '"title":'
}

url_blocked()
{
    [ -z "$*" ] && return 0
    prnt "$@" | grep -qE "$blocked_urls_regex"
}

should_ask_format()
{
    prnt "$1" | grep -qE "$ask_format_regex"
}

dep()
{
    command -v "$1" >/dev/null && return 0
    in_terminal && die "Please install \"$1\"."
    exit 1
}

in_terminal()
{
    [ -t 2 ]
}

is_number()
{
    [ "$1" -eq "$1" ] 2>/dev/null
}

die()
{
    in_terminal &&
        prnt "ytdl: $*" >&2 ||
        notify-send ytdl: "$*"
    exit 1
}

prnt()
{
    printf '%s\n' "$*"
}

main "$@"
exit
