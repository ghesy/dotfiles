# ==============
# = Settings
# ==============

set shell bash
set shellopts "-u"
set ifs "\n"
set period 1
set nopreview
set ratios 1
set dircounts
set info "size"
set scrolloff 10
set incsearch 1
set tabstop 4

set previewer lfpreviewer
set cleaner   lfcleaner

set timefmt   "2006-01-02 15:04"
set errorfmt  "\033[31m%s\033[0m"
set promptfmt "\033[2m%d"

set nohidden
set hiddenfiles ".*:$RECYCLE.BIN:System Volume Information"

# ==============
# = Commands
# ==============

cmd open &{{

    send() {
        for arg; do
            set -- "$@" "$(printf '%s\n' "$1" | sed 's/"/\\"/g')"
            shift
        done
        lf -remote "send $id \$$(printf '"%s" ' "$@")"
    }

    case $(printf '%s\n' $f | tr A-Z a-z) in
        *.pro) exec kicad $f ;;
        *.kicad_pcb*) exec pcbnew $f ;;
        *.sch|*.sch-bak) exec eeschema $f ;;
        *.azw3|*.mobi|*.fb[23]) exec zathura -- $f ;;
    esac

    case $(file -b --mime-type $(readlink -f $f)) in
        */vnd.djvu|*/pdf|*/epup*) exec zathura -- $f ;;
        */x-xcf|*photoshop) exec gimp -- $f ;;
        video/*) exec mpv -- $f ;;
        audio/*) exec send mpvmusic -- $f ;;
        image/*) sxiv -aoF $(realpath -- $f) . | lfselect ;;

        */html)
            case $BROWSER in
                *fox*|*wolf*) exec $BROWSER --new-window -- $f ;;
                *) exec $BROWSER $f ;;
            esac
        ;;

        */troff) send man -- $f ;;
        */x-sc) send sc-im -- $f ;;
        text/*|*/json) send $EDITOR -- $f ;;

        */vnd.ms*|*/msword|*/vnd.openxml*|*opendoc*|*officedoc*)
            exec libreoffice $f
        ;;

        */x-archive|*/x-compress|*/x-cpio|*/x-tar|*/x-bzip2|*/gzip|*/x-lz*|\
        */x-xz|*/zstd|*/x-7z*|*/x-ace*|*/x-rar*|*/x-gtar|*/zip)
            send atool -lp -- $f
        ;;
    esac

}}

cmd paste ${{
    printf '\e[?1049h'
    printf '\e[H'
    list=~/.local/share/lf/files
    mode=$(head -n1 $list)
    srcs=$(sed 1d $list)
    tput civis
    case $mode in
        copy) cpg -ag --backup=numbered $srcs . ;;
        move) mvg  -g --backup=numbered $srcs . 2>/dev/null ;;
    esac
    e=$?
    tput cnorm
    [ $e -eq 0 ] || exit
    printf '\e[?1049l'
}}

cmd delete ${{
    printf '\e[?1049h'
    printf '\e[H'
    echo 'Permanently Deleting Files:'; echo
    printf '  %s\n' $fx ""
    read -p 'Delete? [y/N] ' ans
    case "$ans" in y|Y) rm -rf -- $fx ;; esac
    printf '\e[?1049l'
}}

cmd finder ${{
    f=$(finder -f) || exit
    case $(basename -- $f) in
        .*) lf -remote "send $id set hidden" ;;
    esac
    lfselect $f
}}

cmd mkexec &{{
    [ ! -f $f ] && exit
    if [ -x $f ]; then chmod a-x -- $f
    else chmod a+x -- $f; fi
    lf -remote "send $id reload"
}}

cmd filetype %{{
    file=$(readlink -f $f)
    file -b --mime-type -- $file | tr -d '\n'
    printf '; '
    file -b -- $file
}}

# archive stuff
cmd extract ${{
    printf '\e[?1049h'
    printf '\e[H'
    printf '%s\n\n' 'extracting:'
    printf '  %s\n' $fx ""
    aunpack -De -- $fx
    printf '\e[?1049l'
}}
cmd archive-mount &lfmount $f
cmd archive-mount-password $lfmount -p $f
cmd archive-unmount &lfmount -u

# size of files and dirs
cmd sized0  %echo " calculating..."; du -sh 2>/dev/null
cmd sized1  $du -hd1 2>/dev/null | grep -xvE '\S+\s+\.' | sort -rh | $PAGER

# image stuff
cmd img-rot-cw  &for img in $fx; do convert -rotate 90  $img $img; done
cmd img-rot-ccw &for img in $fx; do convert -rotate -90 $img $img; done
cmd img-autorot %jhead -autorot $fx; echo 'finished autorotating images.'

# other stuff
cmd q quit
cmd jumpback push :mark-load<enter>'
cmd preview-on push :set<space>ratios<space>1:1;set<space>preview;<space>load<enter>
cmd preview-off push :set<space>nopreview;set<space>ratios<space>1;<space>&lfcleaner<enter>
cmd copypath &echo -n $f | xsel -i -p -b
cmd parent-up   push hkl
cmd parent-down push hjl
cmd follow &lfselect $(readlink -f $f)
cmd bulkrename $realpath -s --relative-base=$PWD -- $fx | vidir -
cmd trash  push &trash-put<space>$fx;lf<space>-remote<space>"send<space>$id<space>load"
cmd mkdir  push &<space>name=''<space>;mkdir<space>-p<space>"$name";lf<space>-remote<space>"send<space>$id<space>load";lfselect<space>"$name"<home><a-f><right><right>

# ==============
# = Bindings
# ==============

map ~  cd ~
map .  set hidden!
map *  push :glob-select<space>
map K  parent-up
map J  parent-down
map H  jumpback
map U  &termopen
map fo follow
map rn rename
map yy copy
map dd cut
map pp paste
map ua invert
map <c-a> invert
map uc unselect
map uv clear
map t preview-on
map T preview-off
map cp copypath
map ft filetype
map si set reverse!
map wa &wallpaper $f
map vi push $$EDITOR<space>--<space>
map E  $$EDITOR -- $f
map svi $suedit -- $f
map D trash
map purge delete
map mk mkdir
map xx !$f
map ax mkexec
map dr &dragon-drag-and-drop -a -x $fx
map ex extract
map co $compress $fx
map mm archive-mount
map mM archive-mount-password
map uu archive-unmount
map du sized0
map dU sized1
map ds dust
map dn $ncdu
map <c-f> finder
map rl img-rot-cw
map rh img-rot-ccw
map ar img-autorot
map gi &gimp $fx
map <enter> shell-wait
# renaming
map A  rename # at the very end
map cw push A<c-u> # new rename
map I  push A<c-a> # at the very beginning
map cW bulkrename
# avoid unknown mapping error when pressing esc or tab.
map <esc> :echo
map <tab> :echo

# ==================
# = Remove Bindings
# ==================

map r
map y
map d
map p
map v
map u
map c
map e
map i
map w
map m
map f
map F
map "'"
map '"'
