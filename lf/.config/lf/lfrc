set shell bash
set shellopts '-u'
set ifs "\n"
set incsearch
set incfilter
set mouse
set period 1
set dircounts
set timefmt        "2006-01-02 15:04"
set infotimefmtnew "2006-01-02 15:04"
set infotimefmtold "2006-01-02 15:04"
set errorfmt  "\033[31m%s\033[0m"
set promptfmt "\033[2m%d"
set hiddenfiles ".*:$RECYCLE.BIN:System Volume Information"

cmd ratios set ratios 1:2:3
cmd ratios-nopreview set ratios 1:5
ratios

cmd scrolloff set scrolloff 10
scrolloff

set previewer ~/.config/lf/previewer
set cleaner sxipc

# change the terminal title to lf and reset it on exit
$printf '\033[22t\033]0;lf\a'
cmd on-quit $printf '\033[23t'

# show the git branch in the prompt
cmd on-cd &{{
    if b=$(git branch --show-current) && [[ -n $b ]]; then
        lf -remote 'send '$id' set promptfmt "\033[2m%d at \033[33m'$b'"'
    elif [[ $lf_promptfmt == *' at '* ]]; then
        lf -remote 'send '$id' set promptfmt "\033[2m%d"'
    fi
}}
on-cd

# ========
# = maps
# ========

map ~ cd ~
map . set hidden!
map * push :glob-select<space>
map P push :paste<space>""<left>
map gh
map g top
map <c-g> bottomdir
map zz center
map L openall
map t preview-toggle
map T tag-toggle
map x extract
map a push :archive<space>
map U &termopen
map D push :trash<space>
map X !$f
map m mkdir
map <c-l> togglenum
map <c-f> finder
map <c-o> freq
map W &feh --bg-fill -- $f
map V push $$EDITOR<space>
map R &dragon-drop -a -x $fx
map S getdirsize
map Y &printf %s $f | xclip -selection clipboard # copy file's path
map o &readlink -f -- $f | lfselect # follow symlinks
map H push :mark-load<enter>' # jump back to previous dir
map K parentup
map J parentdown
map E sudoedit
map <c-n> $$SHELL

# renaming
map b bulkrename
map A rename
map I push :rename<enter><home>
map i push :rename<enter><a-b><a-b><a-f> # before extention
map C push :rename<enter><c-u> # new rename

# mouse mappings
map <m-down> down
map <m-up> up
map <m-1> open
map <m-2> updir
map <m-3> preview-toggle

# remove bookmark mappings
map "'"
map '"'

# avoid 'unknown mapping' error
map <esc> :echo
map <tab> :echo

# ============
# = commands
# ============

cmd q quit

cmd bottomdir :set dironly; bottom; set nodironly
cmd bulkrename $realpath -s --relative-base=$PWD -- $fx | vidir -v -
cmd getdirsize !printf '\e[?1049h\e[H... '; du -sh 2>/dev/null
cmd togglenum :set number!; set relativenumber!

# go to the next/previous parent dir
cmd parentup   :updir; set dironly; up;   set nodironly; open
cmd parentdown :updir; set dironly; down; set nodironly; open

cmd open $opener $f
cmd openall $opener $fx

cmd preview-toggle preview-off
cmd preview-on :ratios; set preview; load; cmd preview-toggle preview-off
cmd preview-off :set nopreview; ratios-nopreview; cmd preview-toggle preview-on; &sxipc

cmd finder $lfselect "$(finder)"
cmd freq   $lfselect "$(freq -m fzf)"

cmd mkdir %{{
    set -e
    printf ' mkdir '
    read dir
    mkdir -p -- $dir
    lf -remote 'send load'
    lfselect $dir
}}

cmd trash &{{
    lf -remote "send $id echo Trashing..."
    if msg=$(trash-put $fx 2>&1); then
        lf -remote "send $id echo Trashing Done."
    else
        tmp=$(mktemp)
        trap 'rm -f "$msg"' EXIT
        printf '%s\n' "$msg" > $tmp
        lf -remote "send $id !printf '\e[?1049h\e[H'; cat \"$tmp\""
        lf -remote "send $id echo Trashing Failed."
    fi
    lf -remote 'send load'
}}

cmd delete ${{
    printf '\e[?1049h\e[H'
    echo 'Permanently Deleting Files:'; echo
    printf '  %s\n' $fx ""
    read -p 'Delete? [y/N] ' ans
    case $ans in y|Y) rm -rfv --one-file-system -- $fx ;;
    esac || read -p 'Press enter to continue'
}}

cmd archive ${{
    printf '\e[?1049h\e[H'
    apack $1 $(realpath -s --relative-base=$PWD -- $fx) ||
        { read -p 'Press enter to continue'; exit; }
    lfselect $1
}}

cmd extract ${{
    printf '\e[?1049h\e[H'
    aunpack -De -- $fx || { read -p 'Press enter to continue'; exit ;}
    f=${f%.*}; lfselect ${f%.tar}
}}

cmd sudoedit ${{
    printf '\e[?1049h\e[H'
    SUDO_COMMAND="sudoedit $f" sudoedit -- $f ||
        { read -p 'Press enter to continue'; exit ;}
}}

cmd paste ${{
    set +u
    printf '\e[?1049h\e[H'
    list=~/.local/share/lf/files
    count=$(wc -l <$list)
    [[ ! -f $list ]] || [[ $count -le 1 ]] &&
        { lf -remote "send $id echo nothing to paste."; exit ;}
    action=$(head -n1 $list)
    srcs=$(sed 1d $list)
    printf '\e[?25l' # hide the cursor
    [[ $1 = --simple ]] && shift && mode=simple || mode=adv
    case $action${mode:+-$mode} in
        copy-adv) advcp -ag --backup=numbered -- ${srcs:?} ${1:-.} ;;
        move-adv) advmv  -g --backup=numbered -- ${srcs:?} ${1:-.} ;;
        copy-simple) cp -av --backup=numbered -- ${srcs:?} ${1:-.} ;;
        move-simple) mv  -v --backup=numbered -- ${srcs:?} ${1:-.} ;;
    esac || { read -p 'Press enter to continue'; exit ;}
    rm $list
    lf -remote 'send clear'
    lf -remote 'send load'
    if [[ -n $1 ]]; then
        lfselect "$1"
    elif [[ $count -eq 2 ]]; then
        lfselect "${srcs##*/}"
    fi
    printf '\e[?25h' # show the cursor
}}

cmd center &{{
    n=$(stty size </dev/"$(ps -o tty= -p $$)" | cut -d' ' -f1)
    lf -remote "send $id set scrolloff $(( (n - 3) / 2 ))"
    lf -remote "send $id push jk:scrolloff<enter>"
}}

cmd ls ${{
    [[ $lf_hidden = true ]] && args='-AFt' || args='-Ft'
    ls $args --group-directories-first | fribidi --ltr | ${PAGER:-less}
}}

# vim:ft=conf
